version: '3.8'

services:
  # Main Weather MCP Service
  clima-mcp:
    build: .
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=INFO
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - ENABLE_TRACING=true
      - STRUCTURED_LOGGING=true
    volumes:
      - ./logs:/app/logs
      - ./monitoring/dashboards:/app/dashboards
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - prometheus
      - loki

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - observability
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/data/loki
    command: -config.file=/etc/loki/loki.yml
    networks:
      - observability
    restart: unless-stopped

  # Promtail - Log Shipping
  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./logs:/var/log/clima-mcp
      - ./monitoring/promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - observability
    restart: unless-stopped
    depends_on:
      - loki

  # Alert Manager - Alerting
  alertmanager:
    image: prom/alertmanager:v0.26.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
      - alertmanager_data:/data
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/data'
      - '--web.external-url=http://localhost:9093'
    networks:
      - observability
    restart: unless-stopped

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - observability
    restart: unless-stopped

  # Cadvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - observability
    restart: unless-stopped

  # Development service with hot reload
  clima-mcp-dev:
    build: .
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=DEBUG
      - DEBUG=true
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - ENABLE_TRACING=true
      - STRUCTURED_LOGGING=true
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: ["python", "-m", "weather_mcp.cli", "run"]
    networks:
      - observability
    profiles:
      - dev
    depends_on:
      - prometheus
      - loki

networks:
  observability:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data:
